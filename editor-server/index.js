import { Server } from '@hocuspocus/server'
import fetch from 'node-fetch'
import { Database } from '@hocuspocus/extension-database'
import 'dotenv/config'
import pkg from 'pg'

const { Client } = pkg

const PORT = 3035

// DB Connection
const client = new Client({
  user: process.env.DB_USERNAME,
  host: process.env.DB_HOST,
  database: process.env.DB_DATABASE,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT
})

client.connect(function (err) {
  if (err) throw err
  console.log('Connected!')
})

// server editor
const server = Server.configure({
  port: 1234,
  async onConnect() {
    console.log('üîÆ')
  },
  async onChange(event) {
    // –æ–±–Ω–æ–≤–ª—è–µ–º udpdated_at —É –ø—Ä–æ–µ–∫—Ç–∞
    // const { token } = event.context
    // const [scope, projectId, pageId] = event.documentName.split('-')
    // await fetch(`https://api-knowledge.admlr.lipetsk.ru/api/project/touch/${projectId}`, {
    //   method: 'POST', headers: { Authorization: 'Bearer ' + token }
    // })
  },
  extensions: [
    new Database({
      fetch: async ({ documentName }) => {
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –≤–∏–¥–µ
        // –±–∏–Ω–∞—Ä–Ω—ã–π —Ç–∏–ø –Ω—É–∂–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–Ω–µ–Ω–∏–π (JSON HTML –∏ —Å—Ç—Ä–æ–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç)
        const [scope, projectId, pageId] = documentName.split('-')
        try {
          const res = await client.query(
            `SELECT * FROM page WHERE id = ${pageId} LIMIT 1`
          )
          return res.rows[0].page_value
        } catch (error) {
          console.log(error)
        }
      },
      store: async (data) => {
        // –∑–∞–ø–∏—Å—å –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –≤ –±–¥
        const [scope, projectId, pageId] = data.documentName.split('-')
        try {
          const query = `UPDATE "page" 
                   SET "page_value" = $1
                   WHERE "id" = $2`
          return await client.query(query, [data.state, pageId])
        } catch (error) {
          console.log(error)
        }
      }
    })
  ]
})

// –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Å–æ–∫–µ—Ç
server.listen()
